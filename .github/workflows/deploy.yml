name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ghcr.io/${{ github.repository }}/relational-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository }}/relational-frontend
  DEPLOY_HOST: wkf2000.tplinkdns.com
  DEPLOY_PORT: 2222
  DEPLOY_PATH: /home/deploy/relational

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/relational-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/relational-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: wkf2000.tplinkdns.com
        port: 2222
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Navigate to deployment directory
          cd /home/deploy/relational
          
          # Pull latest images
          echo "Pulling latest backend image..."
          docker-compose -f docker-compose-backend.yml pull
          
          echo "Pulling latest frontend image..."
          docker-compose -f docker-compose-frontend.yml pull
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose -f docker-compose-backend.yml down || true
          docker-compose -f docker-compose-frontend.yml down || true
          
          # Start containers with new images
          echo "Starting backend container..."
          docker-compose -f docker-compose-backend.yml up -d
          
          echo "Starting frontend container..."
          docker-compose -f docker-compose-frontend.yml up -d
          
          # Clean up unused images
          echo "Cleaning up unused Docker images..."
          docker image prune -f
          
          # Show running containers
          echo "Current running containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "Deployment completed successfully!"

    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: wkf2000.tplinkdns.com
        port: 2222
        username: ${{ secrets.DEPLOY_USERNAME }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /home/deploy/relational
          
          # Check if containers are running
          echo "Checking container status..."
          if docker-compose -f docker-compose-backend.yml ps | grep -q "Up"; then
            echo "✅ Backend container is running"
          else
            echo "❌ Backend container is not running"
            docker-compose -f docker-compose-backend.yml logs --tail=20
            exit 1
          fi
          
          if docker-compose -f docker-compose-frontend.yml ps | grep -q "Up"; then
            echo "✅ Frontend container is running"
          else
            echo "❌ Frontend container is not running"
            docker-compose -f docker-compose-frontend.yml logs --tail=20
            exit 1
          fi
          
          echo "✅ All containers are running successfully!"
