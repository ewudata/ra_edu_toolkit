{
  "database": "University",
  "title": "University Relational Algebra Practice",
  "description": "Thirty practice queries that cover the major relational algebra operators on the university schema.",
  "questions": [
    {
      "id": "q01",
      "title": "Computer Science Students",
      "prompt": "List the names of all students majoring in Computer Science.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{name}(sigma{dept_name = 'Comp. Sci.'}(student))",
        "sql": "SELECT name FROM student WHERE dept_name = 'Comp. Sci.';"
      },
      "expected_result": {
        "schema": [
          "name"
        ]
      },
      "tags": [
        "selection",
        "projection"
      ]
    },
    {
      "id": "q02",
      "title": "High Credit Students",
      "prompt": "Find the ids and names of students with at least 90 total credits.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{id, name}(sigma{tot_cred >= 90}(student))",
        "sql": "SELECT id, name FROM student WHERE tot_cred >= 90;"
      },
      "expected_result": {
        "schema": [
          "id",
          "name"
        ]
      },
      "tags": [
        "selection",
        "projection"
      ]
    },
    {
      "id": "q03",
      "title": "Students Below 30 Credits",
      "prompt": "Retrieve all information for students whose total credits are below 30.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "sigma{tot_cred < 30}(student)",
        "sql": "SELECT * FROM student WHERE tot_cred < 30;"
      },
      "expected_result": {
        "schema": [
          "id",
          "name",
          "dept_name",
          "tot_cred"
        ]
      },
      "tags": [
        "selection"
      ]
    },
    {
      "id": "q04",
      "title": "Student Majors",
      "prompt": "Show the distinct majors represented by the students.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{dept_name}(student)",
        "sql": "SELECT DISTINCT dept_name FROM student;"
      },
      "expected_result": {
        "schema": [
          "dept_name"
        ]
      },
      "tags": [
        "projection"
      ]
    },
    {
      "id": "q05",
      "title": "Departments with People",
      "prompt": "List the departments that have either students or instructors.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{dept_name}(student) UNION pi{dept_name}(instructor)",
        "sql": "SELECT dept_name FROM student UNION SELECT dept_name FROM instructor;"
      },
      "expected_result": {
        "schema": [
          "dept_name"
        ]
      },
      "tags": [
        "union",
        "projection"
      ]
    },
    {
      "id": "q06",
      "title": "Departments without Instructors",
      "prompt": "Find departments that currently have courses but no instructors.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{dept_name}(course) - pi{dept_name}(instructor)",
        "sql": "SELECT dept_name FROM course EXCEPT SELECT dept_name FROM instructor;"
      },
      "expected_result": {
        "schema": [
          "dept_name"
        ]
      },
      "tags": [
        "difference",
        "projection"
      ]
    },
    {
      "id": "q07",
      "title": "Departments with Both Students and Instructors",
      "prompt": "Return the departments that have at least one student and at least one instructor.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{dept_name}(student) INTERSECT pi{dept_name}(instructor)",
        "sql": "SELECT dept_name FROM student INTERSECT SELECT dept_name FROM instructor;"
      },
      "expected_result": {
        "schema": [
          "dept_name"
        ]
      },
      "tags": [
        "intersection",
        "projection"
      ]
    },
    {
      "id": "q08",
      "title": "Rename Student Columns",
      "prompt": "Rename the student relation so that id becomes student_id and dept_name becomes major.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "rho{id->student_id, dept_name->major}(student)",
        "sql": "SELECT id AS student_id, name, dept_name AS major, tot_cred FROM student;"
      },
      "expected_result": {
        "schema": [
          "student_id",
          "name",
          "major",
          "tot_cred"
        ]
      },
      "tags": [
        "rename"
      ]
    },
    {
      "id": "q09",
      "title": "Courses with Department Budgets",
      "prompt": "List each course along with its title and the budget of the offering department.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{course_id, title, dept_budget}(rho{budget->dept_budget}(course ⋈ department))",
        "sql": "SELECT c.course_id, c.title, d.budget AS dept_budget FROM course AS c NATURAL JOIN department AS d;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "title",
          "dept_budget"
        ]
      },
      "tags": [
        "natural join",
        "rename"
      ]
    },
    {
      "id": "q10",
      "title": "Fall 2009 Sections with Rooms",
      "prompt": "Find the sections offered in Fall 2009 along with the rooms they occupy using an explicit join condition.",
      "difficulty": "advanced",
      "solution": {
        "relational_algebra": "pi{course_id, sec_id, sec_building, sec_room}( rho{building->sec_building, room_number->sec_room}(sigma{semester = 'Fall' AND year = 2009}(section)) ⋈{sec_building = class_building AND sec_room = class_room} rho{building->class_building, room_number->class_room}(classroom) )",
        "sql": "SELECT s.course_id, s.sec_id, s.building AS sec_building, s.room_number AS sec_room\nFROM section AS s\nJOIN classroom AS c ON s.building = c.building AND s.room_number = c.room_number\nWHERE s.semester = 'Fall' AND s.year = 2009;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "sec_id",
          "sec_building",
          "sec_room"
        ]
      },
      "tags": [
        "theta join",
        "rename",
        "selection"
      ]
    },
    {
      "id": "q11",
      "title": "Same Department Student-Course Pairs",
      "prompt": "Produce student-course pairs where the student majors in the same department that offers the course using a Cartesian product.",
      "difficulty": "advanced",
      "solution": {
        "relational_algebra": "pi{student_name, course_title}(sigma{student_major = course_dept}( rho{name->student_name, dept_name->student_major}(student) × rho{title->course_title, dept_name->course_dept}(course) ))",
        "sql": "SELECT st.name AS student_name, co.title AS course_title\nFROM student AS st CROSS JOIN course AS co\nWHERE st.dept_name = co.dept_name;"
      },
      "expected_result": {
        "schema": [
          "student_name",
          "course_title"
        ]
      },
      "tags": [
        "cartesian product",
        "rename",
        "selection"
      ]
    },
    {
      "id": "q12",
      "title": "Student-Advisor Pairs",
      "prompt": "List student names with their advisors' names.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{student_name, advisor_name}( rho{id->s_id, name->student_name}(student) ⋈ advisor ⋈ rho{id->i_id, name->advisor_name}(instructor) )",
        "sql": "SELECT st.name AS student_name, inst.name AS advisor_name\nFROM student AS st\nJOIN advisor AS adv ON st.id = adv.s_id\nJOIN instructor AS inst ON adv.i_id = inst.id;"
      },
      "expected_result": {
        "schema": [
          "student_name",
          "advisor_name"
        ]
      },
      "tags": [
        "natural join",
        "rename"
      ]
    },
    {
      "id": "q13",
      "title": "Students with Grade A",
      "prompt": "Find the student-course pairs where the grade is A.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{id, course_id, sec_id, semester, year}(sigma{grade = 'A'}(takes))",
        "sql": "SELECT id, course_id, sec_id, semester, year FROM takes WHERE grade = 'A';"
      },
      "expected_result": {
        "schema": [
          "id",
          "course_id",
          "sec_id",
          "semester",
          "year"
        ]
      },
      "tags": [
        "selection",
        "projection"
      ]
    },
    {
      "id": "q14",
      "title": "Courses with Prerequisites",
      "prompt": "Return the course id and title for courses that have at least one prerequisite.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{course_id, title}(course ⋈ prereq)",
        "sql": "SELECT DISTINCT c.course_id, c.title\nFROM course AS c JOIN prereq AS p ON c.course_id = p.course_id;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "title"
        ]
      },
      "tags": [
        "natural join"
      ]
    },
    {
      "id": "q15",
      "title": "Students Who Have Taken Nothing",
      "prompt": "Find students who have not taken any course.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{id, name}(student) - pi{id, name}(student ⋈ pi{id}(takes))",
        "sql": "SELECT id, name FROM student\nEXCEPT\nSELECT DISTINCT st.id, st.name\nFROM student AS st\nJOIN takes AS t ON st.id = t.id;"
      },
      "expected_result": {
        "schema": [
          "id",
          "name"
        ]
      },
      "tags": [
        "difference",
        "natural join"
      ]
    },
    {
      "id": "q16",
      "title": "Students with A or B",
      "prompt": "Find student-course pairs where the student earned an A or a B.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{id, course_id, sec_id, semester, year}(sigma{grade = 'A'}(takes)) UNION pi{id, course_id, sec_id, semester, year}(sigma{grade = 'B'}(takes))",
        "sql": "SELECT id, course_id, sec_id, semester, year FROM takes WHERE grade = 'A'\nUNION\nSELECT id, course_id, sec_id, semester, year FROM takes WHERE grade = 'B';"
      },
      "expected_result": {
        "schema": [
          "id",
          "course_id",
          "sec_id",
          "semester",
          "year"
        ]
      },
      "tags": [
        "union",
        "selection"
      ]
    },
    {
      "id": "q17",
      "title": "People Who Are Students and Instructors",
      "prompt": "Return the ids of people who appear as both a student and an instructor.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{id}(student) INTERSECT pi{id}(instructor)",
        "sql": "SELECT id FROM student INTERSECT SELECT id FROM instructor;"
      },
      "expected_result": {
        "schema": [
          "id"
        ]
      },
      "tags": [
        "intersection",
        "projection"
      ]
    },
    {
      "id": "q18",
      "title": "Section Time Slots",
      "prompt": "Show each section together with the meeting day and start time.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{course_id, sec_id, semester, year, day, start_hr, start_min}(section ⋈ time_slot)",
        "sql": "SELECT s.course_id, s.sec_id, s.semester, s.year, t.day, t.start_hr, t.start_min\nFROM section AS s\nJOIN time_slot AS t ON s.time_slot_id = t.time_slot_id;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "sec_id",
          "semester",
          "year",
          "day",
          "start_hr",
          "start_min"
        ]
      },
      "tags": [
        "natural join"
      ]
    },
    {
      "id": "q19",
      "title": "Fall 2009 vs Spring 2010 Sections",
      "prompt": "Report the course and section identifiers that were offered in Fall 2009 but not in Spring 2010.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{course_id, sec_id}(sigma{semester = 'Fall' AND year = 2009}(section)) - pi{course_id, sec_id}(sigma{semester = 'Spring' AND year = 2010}(section))",
        "sql": "SELECT course_id, sec_id FROM section WHERE semester = 'Fall' AND year = 2009\nEXCEPT\nSELECT course_id, sec_id FROM section WHERE semester = 'Spring' AND year = 2010;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "sec_id"
        ]
      },
      "tags": [
        "difference",
        "selection",
        "projection"
      ]
    },
    {
      "id": "q20",
      "title": "Rename Prerequisite Columns",
      "prompt": "Rename the prerequisite relation so that course_id becomes main_course and prereq_id becomes required_course.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "rho{course_id->main_course, prereq_id->required_course}(prereq)",
        "sql": "SELECT course_id AS main_course, prereq_id AS required_course FROM prereq;"
      },
      "expected_result": {
        "schema": [
          "main_course",
          "required_course"
        ]
      },
      "tags": [
        "rename"
      ]
    },
    {
      "id": "q21",
      "title": "Students Taking All Comp Sci Courses",
      "prompt": "Find the ids of students who have taken every Computer Science course (may be empty).",
      "difficulty": "advanced",
      "solution": {
        "relational_algebra": "(pi{id, course_id}(takes)) DIV (pi{course_id}(sigma{dept_name = 'Comp. Sci.'}(course)))",
        "sql": "SELECT t.id\nFROM takes AS t\nWHERE t.course_id IN (SELECT course_id FROM course WHERE dept_name = 'Comp. Sci.')\nGROUP BY t.id\nHAVING COUNT(DISTINCT t.course_id) = (SELECT COUNT(*) FROM course WHERE dept_name = 'Comp. Sci.');"
      },
      "expected_result": {
        "schema": [
          "id"
        ]
      },
      "tags": [
        "division",
        "projection"
      ]
    },
    {
      "id": "q22",
      "title": "Large Classrooms",
      "prompt": "List the building and room numbers of classrooms with capacity at least 80.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{building, room_number}(sigma{capacity >= 80}(classroom))",
        "sql": "SELECT building, room_number FROM classroom WHERE capacity >= 80;"
      },
      "expected_result": {
        "schema": [
          "building",
          "room_number"
        ]
      },
      "tags": [
        "selection",
        "projection"
      ]
    },
    {
      "id": "q23",
      "title": "High Salary Instructors",
      "prompt": "List instructors who earn more than 90,000 along with their departments.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{instructor_name, dept_name, salary}(sigma{salary > 90000}(rho{name->instructor_name}(instructor) ⋈ department))",
        "sql": "SELECT inst.name AS instructor_name, inst.dept_name, inst.salary\nFROM instructor AS inst\nWHERE inst.salary > 90000;"
      },
      "expected_result": {
        "schema": [
          "instructor_name",
          "dept_name",
          "salary"
        ]
      },
      "tags": [
        "natural join",
        "rename",
        "selection"
      ]
    },
    {
      "id": "q24",
      "title": "Students without Advisors",
      "prompt": "Find the ids and names of students that are not assigned an advisor.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{id, name}(student) - pi{id, name}(student ⋈ rho{s_id->id}(advisor))",
        "sql": "SELECT st.id, st.name\nFROM student AS st\nLEFT JOIN advisor AS adv ON st.id = adv.s_id\nWHERE adv.s_id IS NULL;"
      },
      "expected_result": {
        "schema": [
          "id",
          "name"
        ]
      },
      "tags": [
        "difference",
        "natural join"
      ]
    },
    {
      "id": "q25",
      "title": "Spring 2010 Instructors",
      "prompt": "Retrieve the names of instructors who taught during Spring 2010.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{instructor_name}(rho{id->i_id, name->instructor_name}(instructor) ⋈ sigma{semester = 'Spring' AND year = 2010}(teaches))",
        "sql": "SELECT DISTINCT inst.name AS instructor_name\nFROM instructor AS inst\nJOIN teaches AS te ON inst.id = te.id\nWHERE te.semester = 'Spring' AND te.year = 2010;"
      },
      "expected_result": {
        "schema": [
          "instructor_name"
        ]
      },
      "tags": [
        "natural join",
        "rename",
        "selection"
      ]
    },
    {
      "id": "q26",
      "title": "Courses without Prerequisites",
      "prompt": "List the courses (id and title) that have no prerequisites.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{course_id, title}(course) - pi{course_id, title}(course ⋈ prereq)",
        "sql": "SELECT c.course_id, c.title\nFROM course AS c\nLEFT JOIN prereq AS p ON c.course_id = p.course_id\nWHERE p.course_id IS NULL;"
      },
      "expected_result": {
        "schema": [
          "course_id",
          "title"
        ]
      },
      "tags": [
        "difference",
        "natural join"
      ]
    },
    {
      "id": "q27",
      "title": "Advisors from Same Department",
      "prompt": "Find student-advisor pairs where both are in the same department.",
      "difficulty": "advanced",
      "solution": {
        "relational_algebra": "pi{student_name, advisor_name}(sigma{student_major = advisor_major}( rho{id->s_id, name->student_name, dept_name->student_major}(student) ⋈ advisor ⋈ rho{id->i_id, name->advisor_name, dept_name->advisor_major}(instructor) ))",
        "sql": "SELECT st.name AS student_name, inst.name AS advisor_name\nFROM student AS st\nJOIN advisor AS adv ON st.id = adv.s_id\nJOIN instructor AS inst ON adv.i_id = inst.id\nWHERE st.dept_name = inst.dept_name;"
      },
      "expected_result": {
        "schema": [
          "student_name",
          "advisor_name"
        ]
      },
      "tags": [
        "selection",
        "natural join",
        "rename"
      ]
    },
    {
      "id": "q28",
      "title": "Students with A and B Grades",
      "prompt": "Return ids of students who have earned both an A and a B in different courses.",
      "difficulty": "advanced",
      "solution": {
        "relational_algebra": "pi{id}(sigma{grade = 'A'}(takes)) INTERSECT pi{id}(sigma{grade = 'B'}(takes))",
        "sql": "SELECT t1.id\nFROM takes AS t1\nWHERE t1.grade = 'A' AND EXISTS (SELECT 1 FROM takes AS t2 WHERE t2.id = t1.id AND t2.grade = 'B');"
      },
      "expected_result": {
        "schema": [
          "id"
        ]
      },
      "tags": [
        "intersection",
        "selection"
      ]
    },
    {
      "id": "q29",
      "title": "Courses Passed by Students",
      "prompt": "List student-course combinations where the student did not receive an F.",
      "difficulty": "beginner",
      "solution": {
        "relational_algebra": "pi{id, course_id, sec_id, semester, year}(takes) - pi{id, course_id, sec_id, semester, year}(sigma{grade = 'F'}(takes))",
        "sql": "SELECT id, course_id, sec_id, semester, year FROM takes\nEXCEPT\nSELECT id, course_id, sec_id, semester, year FROM takes WHERE grade = 'F';"
      },
      "expected_result": {
        "schema": [
          "id",
          "course_id",
          "sec_id",
          "semester",
          "year"
        ]
      },
      "tags": [
        "difference",
        "selection"
      ]
    },
    {
      "id": "q30",
      "title": "Departments without Courses",
      "prompt": "Find departments that currently do not offer any course.",
      "difficulty": "intermediate",
      "solution": {
        "relational_algebra": "pi{dept_name}(department) - pi{dept_name}(course)",
        "sql": "SELECT dept_name FROM department\nEXCEPT\nSELECT dept_name FROM course;"
      },
      "expected_result": {
        "schema": [
          "dept_name"
        ]
      },
      "tags": [
        "difference",
        "projection"
      ]
    }
  ]
}